import Mathlib.Tactic -- import all the tactics
import Mathlib.Analysis.Complex.Circle
import Mathlib.Geometry.Manifold.ChartedSpace
import Mathlib.Geometry.Manifold.IsManifold.InteriorBoundary
import Mathlib.Geometry.Manifold.Instances.Real
import Mathlib.Analysis.InnerProductSpace.EuclideanDist
import ¬´1DClass¬ª.RealClass
import ¬´1DClass¬ª.Top

open Set Function Manifold

/- Let M be a compact connected topological 1-dimensional manifold. -/
variable (M : Type*) [TopologicalSpace M] [ConnectedSpace M] [CompactSpace M] [T2Space M] [ChartedSpace (EuclideanSpace ‚Ñù (Fin 1)) M] [IsManifold (ùì° 1) 0 M]

def euc1ToReal : EuclideanSpace ‚Ñù (Fin 1) ‚Üí ‚Ñù := fun x => x 0

def realToEuc1 : ‚Ñù ‚Üí EuclideanSpace ‚Ñù (Fin 1) := fun r =>
  WithLp.equiv 2 (Fin 1 ‚Üí ‚Ñù) |>.symm (fun _ => r)

lemma euc1ToReal_realToEuc1 : Function.LeftInverse euc1ToReal realToEuc1 := by
  intro r
  simp [euc1ToReal, realToEuc1]

lemma realToEuc1_euc1ToReal : Function.RightInverse euc1ToReal realToEuc1 := by
  intro x
  simp [euc1ToReal, realToEuc1]
  ext i
  fin_cases i
  simp

lemma euc1ToReal_continuous : Continuous euc1ToReal := by
  -- The coordinate projection is continuous
  exact continuous_apply 0

lemma realToEuc1_continuous : Continuous realToEuc1 := by
  -- This follows from continuity of the isometric equivalence and constant functions
  apply Continuous.comp
  ¬∑ exact PiLp.continuous_toLp 2 fun i ‚Ü¶ ‚Ñù
  ¬∑ apply continuous_pi
    intro i
    exact continuous_id'

def homeomorph_euclidean_real : (EuclideanSpace ‚Ñù (Fin 1)) ‚âÉ‚Çú ‚Ñù := by
  refine ‚ü®‚ü®euc1ToReal, realToEuc1, ?_, ?_‚ü©, euc1ToReal_continuous, realToEuc1_continuous‚ü©
  ¬∑ intro x
    simp only [realToEuc1, euc1ToReal, Fin.isValue, WithLp.equiv_symm_apply]
    ext i
    fin_cases i
    simp
  ¬∑ intro x
    simp [euc1ToReal, realToEuc1]

lemma chart_homeo_real : ‚àÄ (x : M), Nonempty ((chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).source ‚âÉ‚Çú ‚Ñù) := by
  intro x
  -- connected components of x
  let U := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).source
  let V := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).target
  have œÜ : U ‚âÉ‚Çú V := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).toHomeomorphSourceTarget
  have hUV : Nonempty (U ‚âÉ‚Çú V) := Nonempty.intro œÜ
  have hVOpen : IsOpen V := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).open_target
  -- have : TopologicalSpace (EuclideanSpace ‚Ñù (Fin 1)) := PiLp.topologicalSpace 2 fun x ‚Ü¶ ‚Ñù
  have h : (EuclideanSpace ‚Ñù (Fin 1)) ‚âÉ‚Çú ‚Ñù := by
    exact homeomorph_euclidean_real
  have i : V ‚âÉ‚Çú ‚Ñù := by
    -- tan / log

    sorry
  have œÜi : U ‚âÉ‚Çú ‚Ñù := œÜ.trans i
  exact Nonempty.intro œÜi

/- If M is a connected compact one-dimensional manifold, then it has a finite cover where each
open set in the cover is homeomorphic to ‚Ñù. -/
lemma finite_chart_cover' : ‚àÉ (Œπ : Finset M), (‚àÉ (U : Œπ ‚Üí Set M), (‚àÄ (i : Œπ), IsOpen (U i) ‚àß Nonempty (U i ‚âÉ‚Çú ‚Ñù)) ‚àß univ ‚äÜ ‚ãÉ i, U i) := by
  have hCompact : IsCompact (univ : Set M) := CompactSpace.isCompact_univ
  obtain hChartCover := iUnion_source_chartAt (EuclideanSpace ‚Ñù (Fin 1)) M
  -- Cover by charts with connected domain
  -- Finite cover
  -- Image of charts in subcover
  -- Homeomorphism of charts in subcover to ‚Ñù last step

  sorry

lemma finite_chart_cover : ‚àÉ (Cover : Finset (Set M)), (‚àÄ U ‚àà Cover, (IsOpen U ‚àß Nonempty (U ‚âÉ‚Çú ‚Ñù) ‚àß ‚ãÉ‚ÇÄ (Cover : Set (Set M)) = univ)) := by
  -- For each point p ‚àà M, get a chart from the charted space structure
  /-
  For every point p ‚àà M, there exists an open neighborhood U_p ‚äÜ M and a homeomorphism
  œÜ_p : U_p ‚Üí V_p ‚äÜ ‚Ñù, where V_p is open in ‚Ñù.
  Each V_p ‚äÜ ‚Ñù is a disjoint union of open intervals (by real_class lemma).
  Let I_p be the interval in V_p which contains the point œÜ_p(p) and set W_p = (œÜ_p)‚Åª¬π(I_p).
  Then œÜ_p | W_p : W_p ‚Üí I_p is a homeomorphism onto the open interval I_p.
  Every open interval in ‚Ñù is homeomorphic to ‚Ñù so W_p ‚âÉ‚Çú ‚Ñù.
  By contruction, {W_p : p ‚àà M} is an open cover of M and by compactness, there exists a
  finite subcover {W_{p_i} : i ‚àà {1, ..., n}}, where each W_{p_i} ‚âÉ‚Çú ‚Ñù. ‚àé
  -/
  have hCompact : IsCompact (univ : Set M) := CompactSpace.isCompact_univ

  -- Covering M with charts
  obtain hChartCover := iUnion_source_chartAt (EuclideanSpace ‚Ñù (Fin 1)) M

  obtain hFinCov := IsCompact.elim_finite_subcover hCompact

  have hLocalChart : ‚àÄ (p : M), (‚àÉ (U : Set M), IsOpen U ‚àß p ‚àà U ‚àß Nonempty (U ‚âÉ‚Çú ‚Ñù)) := by
    intro p
    let U := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) p).source
    let œÜ := chartAt (EuclideanSpace ‚Ñù (Fin 1)) p
    have hUOpen : IsOpen U := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) p).open_source
    have hp : p ‚àà U := ChartedSpace.mem_chart_source p

    let V := œÜ '' U
    have hVOpen : IsOpen V := PartialHomeomorph.isOpen_image_of_subset_source œÜ hUOpen fun ‚¶Éa‚¶Ñ a ‚Ü¶ a

    sorry
  sorry

/- We can arrange the elements of the cover obtained in the previous lemma in an order such
that each union V_k = U_1 ‚à™ ‚ãØ ‚à™ U_k is connected. -/
-- lemma ordered_cover_connected_unions (Cover : Finset (Set M))
--     (h_cover : ‚àÄ U ‚àà Cover, (IsOpen U ‚àß Nonempty (U ‚âÉ‚Çú ‚Ñù) ‚àß ‚ãÉ‚ÇÄ (Cover : Set (Set M)) = univ)) : true := by
  -- Indexing sets by
  -- Find minimal cover (cover of size at least n): there must be 1-2
    -- If n = 1, contradiction - ‚Ñù not compact.
    -- n ‚â• 2 so there must be at least 2 sets that overlap because M connected
    -- Lemma says the union must be ‚Ñù or circle - by minimality it's the circle.
    -- Circle clopen (closed by compactness open by union of open sets) - whole space M.

    -- If they intersect in one component, then the cover is not minimal since we can take the union
      -- Union is ‚Ñù by lemma
    -- By lemma, union must be circle.
  -- 2+ intersections between elements of cover => circle
  -- Assume at most 1-intersection contradiction to minimal cover unless n = 1 which is another contradiction (homeo to ‚Ñù not compact).

/- Every compact, connected, one-dimensional manifold without boundary is homeomorphic to the circle. -/
theorem compact_connected_curve : Nonempty (M ‚âÉ‚Çú Circle) := by
  -- Find minimal cover (cover of size at least n): there must be 1-2 (minimality on cardinality map)
    -- If n = 1, contradiction - ‚Ñù not compact.
    -- n ‚â• 2 so there must be at least 2 sets that overlap because M connected
    -- Lemma says the union must be ‚Ñù or circle - by minimality it's the circle.
    -- Circle clopen (closed by compactness open by union of open sets) - whole space M.
  sorry


def DoubleSetoid (X : Type*) (Boundary : Set X) : Setoid (X √ó ({0, 1} : Set ‚Ñï)) :=
  let r (a b : X √ó ({0, 1} : Set ‚Ñï)) := sorry
  { r := r
    iseqv := sorry}

-- def ... Quotient
-- Create instance and prove desired properties about manifold structure.
-- classify 0-manifold as point

-- Or instance Setoid (X √ó Bool)
