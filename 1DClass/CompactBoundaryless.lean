import Mathlib.Tactic -- import all the tactics
import Mathlib.Analysis.Complex.Circle
import Mathlib.Geometry.Manifold.ChartedSpace
import Mathlib.Geometry.Manifold.IsManifold.InteriorBoundary
import Mathlib.Geometry.Manifold.Instances.Real
import Mathlib.Analysis.InnerProductSpace.EuclideanDist
import ¬´1DClass¬ª.RealClass
import ¬´1DClass¬ª.Top

open Set Function Manifold

/- Let M be a compact connected topological 1-dimensional manifold. -/
variable (M : Type*) [TopologicalSpace M] [ConnectedSpace M] [CompactSpace M] [T2Space M] [ChartedSpace (EuclideanSpace ‚Ñù (Fin 1)) M] [IsManifold (ùì° 1) 0 M]

lemma chart_homeo_real : ‚àÄ (x : M), Nonempty ((chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).source ‚âÉ‚Çú ‚Ñù) := by
  intro x
  -- connected components of x
  let U := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).source
  let V := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).target
  have œÜ : U ‚âÉ‚Çú V := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).toHomeomorphSourceTarget
  have hUV : Nonempty (U ‚âÉ‚Çú V) := Nonempty.intro œÜ
  have hVOpen : IsOpen V := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).open_target
  have h : (EuclideanSpace ‚Ñù (Fin 1)) ‚âÉ‚Çú ‚Ñù := Homeomorph.funUnique (Fin 1) ‚Ñù
  have i : V ‚âÉ‚Çú ‚Ñù := by
    -- tan / log

    sorry
  have œÜi : U ‚âÉ‚Çú ‚Ñù := œÜ.trans i
  exact Nonempty.intro œÜi

/- If M is a connected compact one-dimensional manifold, then it has a finite cover where each
open set in the cover is homeomorphic to ‚Ñù. -/
omit [ConnectedSpace M] [T2Space M] [IsManifold (ùì° 1) 0 M]
lemma chart_cover : ‚àÉ (Œπ : Set M), (‚àÉ (U : Œπ ‚Üí Set M), (‚àÄ (i : Œπ), IsOpen (U i)) ‚àß univ ‚äÜ ‚ãÉ i, U i) := by
  have hCompact : IsCompact (univ : Set M) := CompactSpace.isCompact_univ
  obtain hChartCover := iUnion_source_chartAt (EuclideanSpace ‚Ñù (Fin 1)) M
  use (univ : Set M)
  use fun x => (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x.val).source

  constructor
  ¬∑ intro i
    exact (chartAt (EuclideanSpace ‚Ñù (Fin 1)) i.val).open_source
  ¬∑ rw [‚Üê hChartCover]
    simp

  -- Cover by charts with connected domain
  -- Finite cover
  -- Image of charts in subcover
  -- Homeomorphism of charts in subcover to ‚Ñù last step


-- lemma finite_chart_cover : ‚àÉ (t : Finset M), (‚àÉ (U : t ‚Üí Set M), (‚àÄ (i : t), IsOpen (U i)) ‚àß univ ‚äÜ ‚ãÉ i, U i) := by
--   -- For each point p ‚àà M, get a chart from the charted space structure
--   /-
--   For every point p ‚àà M, there exists an open neighborhood U_p ‚äÜ M and a homeomorphism
--   œÜ_p : U_p ‚Üí V_p ‚äÜ ‚Ñù, where V_p is open in ‚Ñù.
--   Each V_p ‚äÜ ‚Ñù is a disjoint union of open intervals (by real_class lemma).
--   Let I_p be the interval in V_p which contains the point œÜ_p(p) and set W_p = (œÜ_p)‚Åª¬π(I_p).
--   Then œÜ_p | W_p : W_p ‚Üí I_p is a homeomorphism onto the open interval I_p.
--   Every open interval in ‚Ñù is homeomorphic to ‚Ñù so W_p ‚âÉ‚Çú ‚Ñù.
--   By contruction, {W_p : p ‚àà M} is an open cover of M and by compactness, there exists a
--   finite subcover {W_{p_i} : i ‚àà {1, ..., n}}, where each W_{p_i} ‚âÉ‚Çú ‚Ñù. ‚àé
--   -/
--   have hCompact : IsCompact (univ : Set M) := CompactSpace.isCompact_univ

--   -- Covering M with charts
--   obtain h‚ÇÅ := chart_cover M
--   rcases h‚ÇÅ with ‚ü®Œπ, U, h‚ÇÇ‚ü©

--   obtain hFinCov := IsCompact.elim_finite_subcover hCompact U
--   rcases h‚ÇÇ with ‚ü®h‚ÇÉ, h‚ÇÑ‚ü©
--   obtain h‚ÇÖ := hFinCov h‚ÇÉ h‚ÇÑ
--   rcases h‚ÇÖ with ‚ü®t, h‚ÇÜ‚ü©
--   -- use t

--   have hLocalChart : ‚àÄ (p : M), (‚àÉ (U : Set M), IsOpen U ‚àß p ‚àà U ‚àß Nonempty (U ‚âÉ‚Çú ‚Ñù)) := by
--     intro p
--     let U := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) p).source
--     let œÜ := chartAt (EuclideanSpace ‚Ñù (Fin 1)) p
--     have hUOpen : IsOpen U := (chartAt (EuclideanSpace ‚Ñù (Fin 1)) p).open_source
--     have hp : p ‚àà U := ChartedSpace.mem_chart_source p

--     let V := œÜ '' U
--     have hVOpen : IsOpen V := PartialHomeomorph.isOpen_image_of_subset_source œÜ hUOpen fun ‚¶Éa‚¶Ñ a ‚Ü¶ a

--     sorry
--   sorry

/- We can arrange the elements of the cover obtained in the previous lemma in an order such
that each union V_k = U_1 ‚à™ ‚ãØ ‚à™ U_k is connected. -/
-- lemma ordered_cover_connected_unions (Cover : Finset (Set M))
--     (h_cover : ‚àÄ U ‚àà Cover, (IsOpen U ‚àß Nonempty (U ‚âÉ‚Çú ‚Ñù) ‚àß ‚ãÉ‚ÇÄ (Cover : Set (Set M)) = univ)) : true := by
  -- Indexing sets by
  -- Find minimal cover (cover of size at least n): there must be 1-2
    -- If n = 1, contradiction - ‚Ñù not compact.
    -- n ‚â• 2 so there must be at least 2 sets that overlap because M connected
    -- Lemma says the union must be ‚Ñù or circle - by minimality it's the circle.
    -- Circle clopen (closed by compactness open by union of open sets) - whole space M.

    -- If they intersect in one component, then the cover is not minimal since we can take the union
      -- Union is ‚Ñù by lemma
    -- By lemma, union must be circle.
  -- 2+ intersections between elements of cover => circle
  -- Assume at most 1-intersection contradiction to minimal cover unless n = 1 which is another contradiction (homeo to ‚Ñù not compact).

/- Every compact, connected, one-dimensional manifold without boundary is homeomorphic to the circle. -/
theorem compact_connected_curve : Nonempty (M ‚âÉ‚Çú Circle) := by
  have hCompact : IsCompact (univ : Set M) := CompactSpace.isCompact_univ

  -- M has a finite cover by charts by compactness
  obtain ‚ü®Œπ, U, h‚ÇÇ‚ü© := chart_cover M

  obtain ‚ü®t, h‚ü© := IsCompact.elim_finite_subcover hCompact U h‚ÇÇ.left h‚ÇÇ.right

  -- Each member of the cover is homeomorphic to ‚Ñù
  have hLocalChart : ‚àÄ (i : t), U i ‚âÉ‚Çú ‚Ñù := by
    intro i
    have : ‚àÄ (x : M), ‚àÉ (i : t), x ‚àà U i := by
      intro x
      have : x ‚àà (chartAt (EuclideanSpace ‚Ñù (Fin 1)) x).source := by
        apply mem_chart_source (EuclideanSpace ‚Ñù (Fin 1))
  -- may need to include proof of homeomorphism to ‚Ñù all in one proof
      sorry
    sorry

  -- Find minimal cover (cover of size at least n): there must be 1-2 (minimality on cardinality map)
    -- If n = 1, contradiction - ‚Ñù not compact.
    -- n ‚â• 2 so there must be at least 2 sets that overlap because M connected
    -- Lemma says the union must be ‚Ñù or circle - by minimality it's the circle.
    -- Circle clopen (closed by compactness open by union of open sets) - whole space M.
  sorry


def DoubleSetoid (X : Type*) (Boundary : Set X) : Setoid (X √ó ({0, 1} : Set ‚Ñï)) :=
  let r (a b : X √ó ({0, 1} : Set ‚Ñï)) := sorry
  { r := r
    iseqv := sorry}

-- def ... Quotient
-- Create instance and prove desired properties about manifold structure.
-- classify 0-manifold as point

-- Or instance Setoid (X √ó Bool)
